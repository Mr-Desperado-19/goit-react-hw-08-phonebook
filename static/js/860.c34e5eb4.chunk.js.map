{"version":3,"file":"static/js/860.c34e5eb4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/contactEditor/MyContactEditor.js","components/filter/MyFilter.jsx","components/updateForm/MyUpdateForm.jsx","components/modalWindow/MyUpdateModal.js","components/contacts/MyContactItem.jsx","components/contacts/MyContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const toast = useToast();\n\n  const checkContact = values => {\n    const contactsArray = contacts.filter(\n      contact => contact.name.toLowerCase().trim() === values.name.toLowerCase().trim()\n    );\n    return contactsArray.length !== 0;\n  };\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          onSubmit={({ name, number }, { resetForm }) => {\n            const text = {\n              name: name,\n              number: number,\n            };\n\n            if (checkContact(text)) {\n              toast({\n                title: `${name} is already in contacts`,\n                status: 'error',\n                isClosable: true,\n                position: 'top',\n              });\n              return;\n            }\n\n            dispatch(addContact(text));\n            resetForm({ name: '', phone: '' });\n          }}\n        >\n          {({ handleSubmit }) => (\n            <form onSubmit={handleSubmit}>\n              <Text fontSize=\"xl\" textAlign=\"center\" mb=\"20px\" color=\"teal\">\n                New Contact\n              </Text>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"number\">Phone</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"text\"\n                    variant=\"filled\"\n                    maxLength={13}\n                  />\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"teal\">\n                  Add contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { MdPersonSearch } from 'react-icons/md';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport {\n  Heading,\n  Flex,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n  return (\n    <Flex flexDirection=\"column\" gap=\"20px\">\n      <Heading as=\"h4\" size=\"md\" textAlign=\"center\">\n        Find contacts by name\n      </Heading>\n      <InputGroup size=\"md\">\n        <Input\n          placeholder=\"Search name...\"\n          size=\"md\"\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n          width={{ base: '350px', lg: '550px' }}\n        />\n        <InputLeftElement pointerEvents=\"none\">\n          <MdPersonSearch color=\"gray.400\" />\n        </InputLeftElement>\n      </InputGroup>\n    </Flex>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { updateContact } from 'redux/contacts/operations';\n\nexport const UpdateForm = ({ onClose, contact }) => {\n  const [contactName, setContactName] = useState(contact.name);\n  const [contactPhone, setcontactPhone] = useState(contact.number);\n  const dispatch = useDispatch();\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" background=\"#fff\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          onSubmit={({ name, number }) => {\n            const body = {\n              contactId: contact.id,\n              text: {\n                name: contactName,\n                number: contactPhone,\n              },\n            };\n\n            dispatch(updateContact(body));\n          }}\n        >\n          {({ handleSubmit }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                    value={contactName}\n                    onChange={evt => setContactName(evt.target.value)}\n                  />\n                </FormControl>\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"number\">Phone</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"text\"\n                    variant=\"filled\"\n                    value={contactPhone}\n                    onChange={evt => setcontactPhone(evt.target.value)}\n                    maxLength={13}\n                  />\n                </FormControl>\n\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"teal\"\n                  width=\"full\"\n                  onClick={onClose}\n                >\n                  Save\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { UpdateForm } from 'components/updateForm/MyUpdateForm';\n\nexport const UpdateModal = ({ isOpen, onClose, contact }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader textAlign=\"center\">Editing a contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody padding={30}>\n          <UpdateForm onClose={onClose} contact={contact} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport {\n  Flex,\n  Text,\n  Box,\n  Spacer,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport { GiSmartphone } from 'react-icons/gi';\nimport { GrEdit } from 'react-icons/gr';\nimport { UpdateModal } from 'components/modalWindow/MyUpdateModal';\nimport { MdClose } from 'react-icons/md';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <>\n      <Flex alignItems=\"center\" gap=\"1px\">\n        <Box w=\"200px\">\n          <Text fontSize=\"md\">{contact.name}</Text>\n        </Box>\n        <Spacer />\n        <Box w=\"180px\">\n          <Flex gap=\"5px\" alignItems=\"center\">\n            <GiSmartphone />\n            <Text fontSize=\"md\">{contact.number}</Text>\n          </Flex>\n        </Box>\n        <Spacer />\n        <Flex gap=\"5px\">\n          <Button\n            color=\"#e74c3c\"\n            w=\"40px\"\n            padding=\"0 5px\"\n            variant=\"outline\"\n            onClick={() => {\n              onOpen();\n            }}\n          >\n            <GrEdit />\n          </Button>\n          <Button\n            color=\"#e74c3c\"\n            w=\"40px\"\n            padding=\"0 5px\"\n            variant=\"outline\"\n            onClick={() => handleDelete(contact.id)}\n          >\n            <MdClose />\n          </Button>\n        </Flex>\n      </Flex>\n      <UpdateModal isOpen={isOpen} onClose={onClose} contact={contact} />\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { List, ListItem } from '@chakra-ui/react';\n\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { ContactItem } from './MyContactItem';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = contacts.filter(\n    contact =>\n      contact.name && contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <List spacing={3} pt=\"20px\">\n      {filtredContacts.map(contact => {\n        return (\n          <ListItem\n            key={contact.id}\n            w=\"450px\"\n            borderColor=\"teal\"\n            borderWidth=\"1px\"\n            borderRadius=\"8px\"\n            p=\"8px\"\n            width={{ base: '350px', lg: '550px' }}\n          >\n            <ContactItem contact={contact} />\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Flex, Box, Text } from '@chakra-ui/react';\nimport { fetchContacts } from 'redux/contacts/operations.js';\nimport { ContactEditor } from '../components/contactEditor/MyContactEditor.js';\nimport { Filter } from '../components/filter/MyFilter.jsx';\nimport { ContactList } from '../components/contacts/MyContactList.jsx';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport { Loader } from '../components/loader/MyLoader.jsx';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Flex flexDirection={{ base: 'column', lg: 'row' }}>\n      <Box\n        bg=\"teal\"\n        p=\"20px\"\n        pt={{ base: '50px', lg: '100px' }}\n        height={{ base: '420px', lg: '100vh' }}\n        width={{ base: '100%', lg: '250px' }}\n      >\n        <ContactEditor />\n      </Box>\n      <Box p=\"20px\" m=\"0 auto\">\n        <Filter />\n        {isLoading && <Loader />}\n        {contacts.length === 0 && (\n          <Box pt=\"50px\">\n            <Text fontSize=\"4xl\" textAlign=\"center\">\n              There are no contacts yet\n            </Text>\n            <Text fontSize=\"4xl\" textAlign=\"center\">\n              Create your first contact in the form\n            </Text>\n          </Box>\n        )}\n\n        <ContactList />\n      </Box>\n    </Flex>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","ContactEditor","dispatch","useDispatch","useSelector","toast","useToast","_jsx","Flex","bg","align","justify","children","Box","p","rounded","w","Formik","initialValues","name","number","onSubmit","_ref","_ref2","values","resetForm","text","contact","toLowerCase","trim","length","addContact","phone","title","concat","status","isClosable","position","_ref3","handleSubmit","_jsxs","Text","fontSize","textAlign","mb","color","VStack","spacing","FormControl","isRequired","FormLabel","htmlFor","Field","as","Input","id","type","variant","maxLength","Button","colorScheme","Filter","flexDirection","gap","Heading","size","InputGroup","placeholder","value","onChange","evt","setFilter","currentTarget","width","base","lg","InputLeftElement","pointerEvents","MdPersonSearch","UpdateForm","onClose","_useState","useState","_useState2","_slicedToArray","contactName","setContactName","_useState3","_useState4","contactPhone","setcontactPhone","background","body","contactId","updateContact","target","onClick","UpdateModal","isOpen","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","padding","ContactItem","_useDisclosure","useDisclosure","onOpen","_Fragment","alignItems","Spacer","GiSmartphone","GrEdit","deleteContact","MdClose","ContactList","normalizedFilter","filtredContacts","includes","List","pt","map","ListItem","borderColor","borderWidth","borderRadius","Contacts","useEffect","fetchContacts","height","m","Loader"],"sourceRoot":""}